import {
  DefaultsSymbol,
  IN_BROWSER,
  IconSymbol,
  SUPPORTS_TOUCH,
  ThemeSymbol,
  VClassIcon,
  consoleError,
  consoleWarn,
  createDefaults,
  createTheme,
  defaultSets,
  getObjectValueByPath,
  mergeDeep,
  propsFactory,
  useTheme,
  wrapInRef
} from "./chunk-WBH7DMGX.js";
import {
  computed,
  h,
  inject,
  provide,
  reactive,
  ref,
  toRefs,
  watchEffect
} from "./chunk-HWWIPSMF.js";
import {
  __spreadProps,
  __spreadValues,
  init_define_process_env
} from "./chunk-KCDQCGWT.js";

// dep:vuetify
init_define_process_env();

// node_modules/vuetify/lib/framework.mjs
init_define_process_env();

// node_modules/vuetify/lib/composables/display.mjs
init_define_process_env();
var DisplaySymbol = Symbol.for("vuetify:display");
var defaultDisplayOptions = {
  mobileBreakpoint: "lg",
  thresholds: {
    xs: 0,
    sm: 600,
    md: 960,
    lg: 1280,
    xl: 1920,
    xxl: 2560
  }
};
var parseDisplayOptions = function() {
  let options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : defaultDisplayOptions;
  return mergeDeep(defaultDisplayOptions, options);
};
function getClientWidth() {
  return IN_BROWSER ? Math.max(document.documentElement.clientWidth, window.innerWidth) : 0;
}
function getClientHeight() {
  return IN_BROWSER ? Math.max(document.documentElement.clientHeight, window.innerHeight) : 0;
}
function getPlatform() {
  const userAgent = IN_BROWSER ? window.navigator.userAgent : "ssr";
  function match(regexp) {
    return Boolean(userAgent.match(regexp));
  }
  const android = match(/android/i);
  const ios = match(/iphone|ipad|ipod/i);
  const cordova = match(/cordova/i);
  const electron = match(/electron/i);
  const chrome = match(/chrome/i);
  const edge = match(/edge/i);
  const firefox = match(/firefox/i);
  const opera = match(/opera/i);
  const win = match(/win/i);
  const mac = match(/mac/i);
  const linux = match(/linux/i);
  const ssr = match(/ssr/i);
  return {
    android,
    ios,
    cordova,
    electron,
    chrome,
    edge,
    firefox,
    opera,
    win,
    mac,
    linux,
    touch: SUPPORTS_TOUCH,
    ssr
  };
}
function createDisplay(options) {
  const {
    thresholds,
    mobileBreakpoint
  } = parseDisplayOptions(options);
  const height = ref(getClientHeight());
  const platform = getPlatform();
  const state = reactive({});
  const width = ref(getClientWidth());
  function onResize() {
    height.value = getClientHeight();
    width.value = getClientWidth();
  }
  watchEffect(() => {
    const xs = width.value < thresholds.sm;
    const sm = width.value < thresholds.md && !xs;
    const md = width.value < thresholds.lg && !(sm || xs);
    const lg = width.value < thresholds.xl && !(md || sm || xs);
    const xl = width.value < thresholds.xxl && !(lg || md || sm || xs);
    const xxl = width.value >= thresholds.xxl;
    const name = xs ? "xs" : sm ? "sm" : md ? "md" : lg ? "lg" : xl ? "xl" : "xxl";
    const breakpointValue = typeof mobileBreakpoint === "number" ? mobileBreakpoint : thresholds[mobileBreakpoint];
    const mobile = !platform.ssr ? width.value < breakpointValue : platform.android || platform.ios || platform.opera;
    state.xs = xs;
    state.sm = sm;
    state.md = md;
    state.lg = lg;
    state.xl = xl;
    state.xxl = xxl;
    state.smAndUp = !xs;
    state.mdAndUp = !(xs || sm);
    state.lgAndUp = !(xs || sm || md);
    state.xlAndUp = !(xs || sm || md || lg);
    state.smAndDown = !(md || lg || xl || xxl);
    state.mdAndDown = !(lg || xl || xxl);
    state.lgAndDown = !(xl || xxl);
    state.xlAndDown = !xxl;
    state.name = name;
    state.height = height.value;
    state.width = width.value;
    state.mobile = mobile;
    state.mobileBreakpoint = mobileBreakpoint;
    state.platform = platform;
    state.thresholds = thresholds;
  });
  if (IN_BROWSER) {
    window.addEventListener("resize", onResize, {
      passive: true
    });
  }
  return toRefs(state);
}
function useDisplay() {
  const display = inject(DisplaySymbol);
  if (!display)
    throw new Error("Could not find Vuetify display injection");
  return display;
}

// node_modules/vuetify/lib/composables/locale.mjs
init_define_process_env();

// node_modules/vuetify/lib/locale/en.mjs
init_define_process_env();
var en_default = {
  badge: "Badge",
  close: "Close",
  dataIterator: {
    noResultsText: "No matching records found",
    loadingText: "Loading items..."
  },
  dataTable: {
    itemsPerPageText: "Rows per page:",
    ariaLabel: {
      sortDescending: "Sorted descending.",
      sortAscending: "Sorted ascending.",
      sortNone: "Not sorted.",
      activateNone: "Activate to remove sorting.",
      activateDescending: "Activate to sort descending.",
      activateAscending: "Activate to sort ascending."
    },
    sortBy: "Sort by"
  },
  dataFooter: {
    itemsPerPageText: "Items per page:",
    itemsPerPageAll: "All",
    nextPage: "Next page",
    prevPage: "Previous page",
    firstPage: "First page",
    lastPage: "Last page",
    pageText: "{0}-{1} of {2}"
  },
  datePicker: {
    itemsSelected: "{0} selected",
    nextMonthAriaLabel: "Next month",
    nextYearAriaLabel: "Next year",
    prevMonthAriaLabel: "Previous month",
    prevYearAriaLabel: "Previous year"
  },
  noDataText: "No data available",
  carousel: {
    prev: "Previous visual",
    next: "Next visual",
    ariaLabel: {
      delimiter: "Carousel slide {0} of {1}"
    }
  },
  calendar: {
    moreEvents: "{0} more"
  },
  fileInput: {
    counter: "{0} files",
    counterSize: "{0} files ({1} in total)"
  },
  timePicker: {
    am: "AM",
    pm: "PM"
  },
  pagination: {
    ariaLabel: {
      root: "Pagination Navigation",
      next: "Next page",
      previous: "Previous page",
      page: "Goto Page {0}",
      currentPage: "Page {0}, Current Page",
      first: "First page",
      last: "Last page"
    }
  },
  rating: {
    ariaLabel: {
      item: "Rating {0} of {1}"
    }
  }
};

// node_modules/vuetify/lib/composables/locale.mjs
var LocaleAdapterSymbol = Symbol.for("vuetify:locale-adapter");
var VuetifyLocaleSymbol = Symbol.for("vuetify:locale");
function isLocaleAdapter(x) {
  return !!x && x.hasOwnProperty("getScope") && x.hasOwnProperty("createScope") && x.hasOwnProperty("createRoot");
}
function createLocaleAdapter(app, options) {
  const adapter = isLocaleAdapter(options) ? options : createDefaultLocaleAdapter(options);
  const rootInstance = adapter.createRoot(app);
  return {
    adapter,
    rootInstance
  };
}
var LANG_PREFIX = "$vuetify.";
var replace = (str, params) => {
  return str.replace(/\{(\d+)\}/g, (match, index) => {
    return String(params[+index]);
  });
};
var createTranslateFunction = (current, fallback, messages) => {
  return function(key) {
    for (var _len = arguments.length, params = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      params[_key - 1] = arguments[_key];
    }
    if (!key.startsWith(LANG_PREFIX)) {
      return replace(key, params);
    }
    const shortKey = key.replace(LANG_PREFIX, "");
    const currentLocale = current.value && messages.value[current.value];
    const fallbackLocale = fallback.value && messages.value[fallback.value];
    let str = getObjectValueByPath(currentLocale, shortKey, null);
    if (!str) {
      consoleWarn(`Translation key "${key}" not found in "${current.value}", trying fallback locale`);
      str = getObjectValueByPath(fallbackLocale, shortKey, null);
    }
    if (!str) {
      consoleError(`Translation key "${key}" not found in fallback`);
      str = key;
    }
    if (typeof str !== "string") {
      consoleError(`Translation key "${key}" has a non-string value`);
      str = key;
    }
    return replace(str, params);
  };
};
function createNumberFunction(current, fallback) {
  return (value, options) => {
    const numberFormat = new Intl.NumberFormat([current.value, fallback.value], options);
    return numberFormat.format(value);
  };
}
function createDefaultLocaleAdapter(options) {
  const createScope = (options2) => {
    const current = wrapInRef(options2.current);
    const fallback = wrapInRef(options2.fallback);
    const messages = wrapInRef(options2.messages);
    return {
      current,
      fallback,
      messages,
      t: createTranslateFunction(current, fallback, messages),
      n: createNumberFunction(current, fallback)
    };
  };
  return {
    createRoot: (app) => {
      var _options$defaultLocal, _options$fallbackLoca, _options$messages;
      const rootScope = createScope({
        current: (_options$defaultLocal = options == null ? void 0 : options.defaultLocale) != null ? _options$defaultLocal : "en",
        fallback: (_options$fallbackLoca = options == null ? void 0 : options.fallbackLocale) != null ? _options$fallbackLoca : "en",
        messages: (_options$messages = options == null ? void 0 : options.messages) != null ? _options$messages : {
          en: en_default
        }
      });
      app.provide(VuetifyLocaleSymbol, rootScope);
      return rootScope;
    },
    getScope: () => {
      const currentScope = inject(VuetifyLocaleSymbol);
      if (!currentScope)
        throw new Error("[Vuetify] Could not find injected locale instance");
      return currentScope;
    },
    createScope: (options2) => {
      const currentScope = inject(VuetifyLocaleSymbol);
      if (!currentScope)
        throw new Error("[Vuetify] Could not find injected locale instance");
      const newScope = createScope({
        current: computed(() => {
          var _options$locale;
          return (_options$locale = options2 == null ? void 0 : options2.locale) != null ? _options$locale : currentScope.current.value;
        }),
        fallback: computed(() => {
          var _options$locale2;
          return (_options$locale2 = options2 == null ? void 0 : options2.locale) != null ? _options$locale2 : currentScope.fallback.value;
        }),
        messages: computed(() => {
          var _options$messages2;
          return (_options$messages2 = options2 == null ? void 0 : options2.messages) != null ? _options$messages2 : currentScope.messages.value;
        })
      });
      provide(VuetifyLocaleSymbol, newScope);
      return newScope;
    }
  };
}

// node_modules/vuetify/lib/composables/rtl.mjs
init_define_process_env();

// node_modules/vuetify/lib/locale/index.mjs
init_define_process_env();

// node_modules/vuetify/lib/locale/af.mjs
init_define_process_env();

// node_modules/vuetify/lib/locale/ar.mjs
init_define_process_env();

// node_modules/vuetify/lib/locale/bg.mjs
init_define_process_env();

// node_modules/vuetify/lib/locale/ca.mjs
init_define_process_env();

// node_modules/vuetify/lib/locale/ckb.mjs
init_define_process_env();

// node_modules/vuetify/lib/locale/cs.mjs
init_define_process_env();

// node_modules/vuetify/lib/locale/da.mjs
init_define_process_env();

// node_modules/vuetify/lib/locale/de.mjs
init_define_process_env();

// node_modules/vuetify/lib/locale/el.mjs
init_define_process_env();

// node_modules/vuetify/lib/locale/es.mjs
init_define_process_env();

// node_modules/vuetify/lib/locale/et.mjs
init_define_process_env();

// node_modules/vuetify/lib/locale/fa.mjs
init_define_process_env();

// node_modules/vuetify/lib/locale/fi.mjs
init_define_process_env();

// node_modules/vuetify/lib/locale/fr.mjs
init_define_process_env();

// node_modules/vuetify/lib/locale/hr.mjs
init_define_process_env();

// node_modules/vuetify/lib/locale/hu.mjs
init_define_process_env();

// node_modules/vuetify/lib/locale/he.mjs
init_define_process_env();

// node_modules/vuetify/lib/locale/id.mjs
init_define_process_env();

// node_modules/vuetify/lib/locale/it.mjs
init_define_process_env();

// node_modules/vuetify/lib/locale/ja.mjs
init_define_process_env();

// node_modules/vuetify/lib/locale/ko.mjs
init_define_process_env();

// node_modules/vuetify/lib/locale/lv.mjs
init_define_process_env();

// node_modules/vuetify/lib/locale/lt.mjs
init_define_process_env();

// node_modules/vuetify/lib/locale/nl.mjs
init_define_process_env();

// node_modules/vuetify/lib/locale/no.mjs
init_define_process_env();

// node_modules/vuetify/lib/locale/pl.mjs
init_define_process_env();

// node_modules/vuetify/lib/locale/pt.mjs
init_define_process_env();

// node_modules/vuetify/lib/locale/ro.mjs
init_define_process_env();

// node_modules/vuetify/lib/locale/ru.mjs
init_define_process_env();

// node_modules/vuetify/lib/locale/sk.mjs
init_define_process_env();

// node_modules/vuetify/lib/locale/sl.mjs
init_define_process_env();

// node_modules/vuetify/lib/locale/sr-Cyrl.mjs
init_define_process_env();

// node_modules/vuetify/lib/locale/sr-Latn.mjs
init_define_process_env();

// node_modules/vuetify/lib/locale/sv.mjs
init_define_process_env();

// node_modules/vuetify/lib/locale/th.mjs
init_define_process_env();

// node_modules/vuetify/lib/locale/tr.mjs
init_define_process_env();

// node_modules/vuetify/lib/locale/az.mjs
init_define_process_env();

// node_modules/vuetify/lib/locale/uk.mjs
init_define_process_env();

// node_modules/vuetify/lib/locale/vi.mjs
init_define_process_env();

// node_modules/vuetify/lib/locale/zh-Hans.mjs
init_define_process_env();

// node_modules/vuetify/lib/locale/zh-Hant.mjs
init_define_process_env();

// node_modules/vuetify/lib/locale/index.mjs
var rtl = {
  af: false,
  ar: true,
  bg: false,
  ca: false,
  ckb: false,
  cs: false,
  de: false,
  el: false,
  en: false,
  es: false,
  et: false,
  fa: false,
  fi: false,
  fr: false,
  hr: false,
  hu: false,
  he: true,
  id: false,
  it: false,
  ja: false,
  ko: false,
  lv: false,
  lt: false,
  nl: false,
  no: false,
  pl: false,
  pt: false,
  ro: false,
  ru: false,
  sk: false,
  sl: false,
  srCyrl: false,
  srLatn: false,
  sv: false,
  th: false,
  tr: false,
  az: false,
  uk: false,
  vi: false,
  zhHans: false,
  zhHant: false
};

// node_modules/vuetify/lib/composables/rtl.mjs
var RtlSymbol = Symbol.for("vuetify:rtl");
function createRtl(localeScope, options) {
  var _options$rtl, _options$defaultRtl;
  return createRtlScope({
    rtl: __spreadValues(__spreadValues({}, rtl), (_options$rtl = options == null ? void 0 : options.rtl) != null ? _options$rtl : {}),
    isRtl: ref((_options$defaultRtl = options == null ? void 0 : options.defaultRtl) != null ? _options$defaultRtl : false),
    rtlClasses: ref("")
  }, localeScope);
}
function createRtlScope(currentScope, localeScope, options) {
  const isRtl = computed(() => {
    if (typeof (options == null ? void 0 : options.rtl) === "boolean")
      return options.rtl;
    if (localeScope.current.value && currentScope.rtl.hasOwnProperty(localeScope.current.value)) {
      return currentScope.rtl[localeScope.current.value];
    }
    return currentScope.isRtl.value;
  });
  return {
    isRtl,
    rtl: currentScope.rtl,
    rtlClasses: computed(() => `v-locale--is-${isRtl.value ? "rtl" : "ltr"}`)
  };
}
function provideRtl(props, localeScope) {
  const currentScope = inject(RtlSymbol);
  if (!currentScope)
    throw new Error("[Vuetify] Could not find injected rtl instance");
  const newScope = createRtlScope(currentScope, localeScope, props);
  provide(RtlSymbol, newScope);
  return newScope;
}
function useRtl() {
  const currentScope = inject(RtlSymbol);
  if (!currentScope)
    throw new Error("[Vuetify] Could not find injected rtl instance");
  return currentScope;
}

// node_modules/vuetify/lib/iconsets/mdi.mjs
init_define_process_env();
var aliases = {
  collapse: "mdi-chevron-up",
  complete: "mdi-check",
  cancel: "mdi-close-circle",
  close: "mdi-close",
  delete: "mdi-close-circle",
  clear: "mdi-close-circle",
  success: "mdi-check-circle",
  info: "mdi-information",
  warning: "mdi-alert-circle",
  error: "mdi-close-circle",
  prev: "mdi-chevron-left",
  next: "mdi-chevron-right",
  checkboxOn: "mdi-checkbox-marked",
  checkboxOff: "mdi-checkbox-blank-outline",
  checkboxIndeterminate: "mdi-minus-box",
  delimiter: "mdi-circle",
  sort: "mdi-arrow-up",
  expand: "mdi-chevron-down",
  menu: "mdi-menu",
  subgroup: "mdi-menu-down",
  dropdown: "mdi-menu-down",
  radioOn: "mdi-radiobox-marked",
  radioOff: "mdi-radiobox-blank",
  edit: "mdi-pencil",
  ratingEmpty: "mdi-star-outline",
  ratingFull: "mdi-star",
  ratingHalf: "mdi-star-half-full",
  loading: "mdi-cached",
  first: "mdi-page-first",
  last: "mdi-page-last",
  unfold: "mdi-unfold-more-horizontal",
  file: "mdi-paperclip",
  plus: "mdi-plus",
  minus: "mdi-minus"
};
var mdi = {
  component: (props) => h(VClassIcon, __spreadProps(__spreadValues({}, props), {
    class: "mdi"
  }))
};

// node_modules/vuetify/lib/composables/index.mjs
init_define_process_env();

// node_modules/vuetify/lib/composables/layout.mjs
init_define_process_env();

// node_modules/vuetify/lib/composables/resizeObserver.mjs
init_define_process_env();

// node_modules/vuetify/lib/composables/layout.mjs
var VuetifyLayoutKey = Symbol.for("vuetify:layout");
var makeLayoutProps = propsFactory({
  overlaps: {
    type: Array,
    default: () => []
  },
  fullHeight: Boolean
}, "layout");
var makeLayoutItemProps = propsFactory({
  name: {
    type: String
  },
  priority: {
    type: [Number, String],
    default: 0
  },
  absolute: Boolean
}, "layout-item");
function useLayout() {
  const layout = inject(VuetifyLayoutKey);
  if (!layout)
    throw new Error("Could not find injected Vuetify layout");
  return layout;
}

// node_modules/vuetify/lib/framework.mjs
var createVuetify = function() {
  let options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
  const install = (app) => {
    const {
      components = {},
      directives = {},
      icons = {}
    } = options;
    for (const key in directives) {
      const directive = directives[key];
      app.directive(key, directive);
    }
    for (const key in components) {
      const component = components[key];
      app.component(key, component);
    }
    app.provide(DefaultsSymbol, createDefaults(options.defaults));
    app.provide(DisplaySymbol, createDisplay(options.display));
    app.provide(ThemeSymbol, createTheme(app, options.theme));
    app.provide(IconSymbol, mergeDeep({
      defaultSet: "mdi",
      sets: __spreadProps(__spreadValues({}, defaultSets), {
        mdi
      }),
      aliases
    }, icons));
    const {
      adapter,
      rootInstance
    } = createLocaleAdapter(app, options == null ? void 0 : options.locale);
    app.provide(LocaleAdapterSymbol, adapter);
    app.provide(RtlSymbol, createRtl(rootInstance, options == null ? void 0 : options.locale));
    function inject2(key) {
      var _vm$parent$provides, _vm$parent, _vm$vnode$appContext;
      const vm = this.$;
      const provides = (_vm$parent$provides = (_vm$parent = vm.parent) == null ? void 0 : _vm$parent.provides) != null ? _vm$parent$provides : (_vm$vnode$appContext = vm.vnode.appContext) == null ? void 0 : _vm$vnode$appContext.provides;
      if (provides && key in provides) {
        return provides[key];
      }
    }
    app.mixin({
      computed: {
        $vuetify() {
          return reactive({
            defaults: inject2.call(this, DefaultsSymbol),
            display: inject2.call(this, DisplaySymbol),
            theme: inject2.call(this, ThemeSymbol),
            icons: inject2.call(this, IconSymbol),
            locale: inject2.call(this, LocaleAdapterSymbol),
            rtl: inject2.call(this, RtlSymbol)
          });
        }
      }
    });
  };
  return {
    install
  };
};
export {
  createVuetify,
  provideRtl,
  useDisplay,
  useLayout,
  useRtl,
  useTheme
};
//# sourceMappingURL=vuetify.js.map
